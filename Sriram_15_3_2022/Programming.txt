Assignment Programming:

=> Polymorphism:

class Parent {

	void Print()
	{

		
		System.out.println("parent class");
	}
}

class subclass1 extends Parent {

	
	void Print() { System.out.println("subclass1"); }
}

class subclass2 extends Parent {

	
	void Print()
	{

		
		System.out.println("subclass2");
	}
}

class GFG {

	
	public static void main(String[] args)
	{

			Parent a;

		

		a = new subclass1();
		a.Print();

		a = new subclass2();
		a.Print();
	}
}


=> Inheritance:

class Employee{  
 float salary=40000;  
}  
class Programmer extends Employee{  
 int bonus=10000;  
 public static void main(String args[]){  
   Programmer p=new Programmer();  
   System.out.println("Programmer salary is:"+p.salary);  
   System.out.println("Bonus of Programmer is:"+p.bonus);  
}  
}  

=> Encapsulation:

package com.mds.encapsulation;
public class Employee {
private int id;
private String name;
private int salary;
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public int getSalary() {
return salary;
}
public void setSalary(int salary) {
this.salary = salary;
}
}
package com.mds.encapsulation;
public class Test {
public static void main(String[] args) {
Employee e =new Employee();
e.setId(350);
e.setName("Harika");
e.setSalary(50000);
System.out.println(e.getId());
System.out.println(e.getName());
System.out.println(e.getSalary());
}
}


=> Abstraction:

public abstract class Employee {
   private String name;
   private String address;
   private int number;

   public Employee(String name, String address, int number) {
      System.out.println("Constructing an Employee");
      this.name = name;
      this.address = address;
      this.number = number;
   }
   
   public double computePay() {
     System.out.println("Inside Employee computePay");
     return 0.0;
   }
   
   public void mailCheck() {
      System.out.println("Mailing a check to " + this.name + " " + this.address);
   }

   public String toString() {
      return name + " " + address + " " + number;
   }

   public String getName() {
      return name;
   }
 
   public String getAddress() {
      return address;
   }
   
   public void setAddress(String newAddress) {
      address = newAddress;
   }
 
   public int getNumber() {
      return number;
   }
}

Printing Star Patterns:

public class Main {

	public static void main(String[] args) {
		ParameterandReturnType obj=new ParameterandReturnType();
		obj.possibility1();
		System.out.println("without parameter and with return type"+obj.possibility2());
		obj.possibility3(2);
		System.out.println("with parameter and with boolean type"+obj.possibility4(1));

	}

}



public class ParameterandReturnType {
	public void possibility1() {
		System.out.println("without parameter and without return type");
	}
	public boolean possibility2() {
		int a=3;
		if(a==3) {
			return true;
		}
		else {
			return false;
		}
	}
	public void possibility3(int a) {
		if(a==2) {
			//System.out.println("the value of a is: "+a);
			System.out.println("with parameter and without return type");
		}
	}
	public boolean possibility4(int a) {
		if(a==1) {
			return true;
		}
		else {
			return false;
		}
	}

}
